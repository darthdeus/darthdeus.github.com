<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[darthdeus' blog]]></title>
  <link href="http://darthdeus.github.io/atom.xml" rel="self"/>
  <link href="http://darthdeus.github.io/"/>
  <updated>2013-09-05T02:16:57+02:00</updated>
  <id>http://darthdeus.github.io/</id>
  <author>
    <name><![CDATA[Jakub Arnold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL Basics by Example]]></title>
    <link href="http://darthdeus.github.io/blog/2013/08/19/postgresql-basics-by-example/"/>
    <updated>2013-08-19T01:19:00+02:00</updated>
    <id>http://darthdeus.github.io/blog/2013/08/19/postgresql-basics-by-example</id>
    <content type="html"><![CDATA[<p>Connecting to a database</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql postgres     # the default database
</span><span class='line'>$ psql database_name</span></code></pre></td></tr></table></div></figure>


<p>Connecting as a specific user</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql postgres john
</span><span class='line'>$ psql -U john postgres</span></code></pre></td></tr></table></div></figure>


<p>Connecting to a host/port (by default <code>psql</code> uses a unix socket)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql -h localhost -p 5432 postgres</span></code></pre></td></tr></table></div></figure>


<p>You can also explicitly specify if you want to enter a password <code>-W</code> or not <code>-w</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ psql -w postgres
</span><span class='line'>$ psql -W postgres
</span><span class='line'>Password:</span></code></pre></td></tr></table></div></figure>


<p>Once you&#8217;re inside <code>psql</code> you can control the database. Here&#8217;s a couple of handy commands</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres=# \h                 # help on SQL commands
</span><span class='line'>postgres=# \?                 # help on psql commands, such as \? and \h
</span><span class='line'>postgres=# \l                 # list databases
</span><span class='line'>postgres=# \c database_name   # connect to a database
</span><span class='line'>postgres=# \d                 # list of tables
</span><span class='line'>postgres=# \d table_name      # schema of a given table
</span><span class='line'>postgres=# \du                # list roles
</span><span class='line'>postgres=# \e                 # edit in $EDITOR</span></code></pre></td></tr></table></div></figure>


<p>At this point you can just type SQL statements and they&#8217;ll be executed on the database you&#8217;re currently
connected to.</p>

<h2>User Management</h2>

<p>Once your application goes into production, or basically anywhere outside of your dev machine,
you&#8217;re going to want to create some users and restrict access.</p>

<p>We have two options for creating users, either from the shell via <code>createuser</code> or via SQL <code>CREATE ROLE</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ createuser john
</span><span class='line'>postgres=# CREATE ROLE john;</span></code></pre></td></tr></table></div></figure>


<p>One thing to note here is that by default users created with <code>CREATE ROLE</code> can&#8217;t log in. To allow login you need to provide
the <code>LOGIN</code> attribute</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres=# CREATE ROLE john LOGIN;
</span><span class='line'>postgres=# CREATE ROLE john WITH LOGIN; # the same as above
</span><span class='line'>postgres=# CREATE USER john;            # alternative to CREATE ROLE which adds the LOGIN attribute</span></code></pre></td></tr></table></div></figure>


<p>You can also add the <code>LOGIN</code> attribute with <code>ALTER ROLE</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres=# ALTER ROLE john LOGIN;
</span><span class='line'>postgres=# ALTER ROLE john NOLOGIN;   # remove login</span></code></pre></td></tr></table></div></figure>


<p>You can also specify multiple attributes when using <code>CREATE ROLE</code> or <code>ALTER ROLE</code>, but bare in mind that <code>ALTER ROLE</code> doesn&#8217;t change the permissions the role already has which you don&#8217;t specify.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres=# CREATE ROLE deploy SUPERUSER LOGIN;
</span><span class='line'>CREATE ROLE
</span><span class='line'>postgres=# ALTER ROLE deploy NOSUPERUSER CREATEDB;  # the LOGIN privilege is not touched here
</span><span class='line'>ALTER ROLE
</span><span class='line'>postgres=# \du deploy
</span><span class='line'>           List of roles
</span><span class='line'> Role name | Attributes | Member of
</span><span class='line'>-----------+------------+-----------
</span><span class='line'> deploy    | Create DB  | {}</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s an alternative to <code>CREATE ROLE john WITH LOGIN</code>, and that&#8217;s <code>CREATE USER</code> which automatically creates the <code>LOGIN</code> permission. It is important to understand that users and roles are the same thing. In fact there&#8217;s no such thing as a user in PostgreSQL, only a role with LOGIN permission</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres=# CREATE USER john;
</span><span class='line'>CREATE ROLE
</span><span class='line'>postgres=# CREATE ROLE kate;
</span><span class='line'>CREATE ROLE
</span><span class='line'>postgres=# \du
</span><span class='line'>                             List of roles
</span><span class='line'> Role name |                   Attributes                   | Member of
</span><span class='line'>-----------+------------------------------------------------+-----------
</span><span class='line'> darth     | Superuser, Create role, Create DB, Replication | {}
</span><span class='line'> john      |                                                | {}
</span><span class='line'> kate      | Cannot login                                   | {}</span></code></pre></td></tr></table></div></figure>


<p>You can also create groups via <code>CREATE GROUP</code> (which is now aliased to <code>CREATE ROLE</code>), and then grant or revoke
access to other roles.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres=# CREATE GROUP admin LOGIN;
</span><span class='line'>CREATE ROLE
</span><span class='line'>postgres=# GRANT admin TO john;
</span><span class='line'>GRANT ROLE
</span><span class='line'>postgres=# \du
</span><span class='line'>                             List of roles
</span><span class='line'> Role name |                   Attributes                   | Member of
</span><span class='line'>-----------+------------------------------------------------+-----------
</span><span class='line'> admin     |                                                | {}
</span><span class='line'> darth     | Superuser, Create role, Create DB, Replication | {}
</span><span class='line'> john      |                                                | {admin}
</span><span class='line'> kate      | Cannot login                                   | {}
</span><span class='line'>postgres=# REVOKE admin FROM john;
</span><span class='line'>REVOKE ROLE
</span><span class='line'>postgres=# \du
</span><span class='line'>                             List of roles
</span><span class='line'> Role name |                   Attributes                   | Member of
</span><span class='line'>-----------+------------------------------------------------+-----------
</span><span class='line'> admin     |                                                | {}
</span><span class='line'> darth     | Superuser, Create role, Create DB, Replication | {}
</span><span class='line'> john      |                                                | {}
</span><span class='line'> kate      | Cannot login                                   | {}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Ember.js - part 1]]></title>
    <link href="http://darthdeus.github.io/blog/2013/02/19/testing-ember-dot-js-part-1/"/>
    <updated>2013-02-19T19:05:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/02/19/testing-ember-dot-js-part-1</id>
    <content type="html"><![CDATA[<p>Ever since I saw the <em>testing</em> slides from EmberCamp I was thinking
about testing. Up until now I&#8217;ve been using Capybara which is really
really really slow.</p>

<p>But @joliss mentioned this thing called <code>Ember.testing</code> which should
automagically fix all of the async problems which make tests ugly, such
as waiting for the application to initialize and finish routing.</p>

<p>In its essence <code>Ember.testing = true</code> disables the automatic runloop,
which gives you the control to manually schedule asynchronous operations
to happen in a one-off runloop via <code>Ember.run</code>.</p>

<p><code>Ember.run</code> will run the given function inside a runloop and flush all
of the bindings before it finishes, which means you can render a view
inside <code>Ember.run</code> and check the DOM right after that. Here&#8217;s an example
from the <code>Ember.View</code> tests</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">view</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ContainerView</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">childViews</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;child&quot;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">child</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;aside&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">view</span><span class="p">.</span><span class="nx">createElement</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">equal</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;aside&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>view.createElement()</code> happens inside the runloop
scheduled by <code>Ember.run</code> which will return only after the view was
completely rendered and all bindings flushed.</p>

<p>Let&#8217;s take a look at a <a href="http://jsbin.com/ixupad/59/edit">complete example</a>
and take it apart step by step</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Testing mode disables automatic runloop</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">testing</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creating an application normally happens async,</span>
</span><span class='line'><span class="c1">// which is why we have to wrap it in Ember.run</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">App</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Store</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">revision</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">adapter</span><span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">FixtureAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// This will make the FixtureAdapter do everything synchronously</span>
</span><span class='line'>    <span class="c1">// instead of using setTimeout, which is vital because setTimeout</span>
</span><span class='line'>    <span class="c1">// happens outside of the runloop.</span>
</span><span class='line'>    <span class="nx">simulateRemoteResponse</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">)});</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">FIXTURES</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;brohuda&quot;</span> <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">HomeRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Enabling Ember.testing will also disable automatic initialization,</span>
</span><span class='line'><span class="c1">// which forces us to initialize manually</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In real life this would be an assertion,</span>
</span><span class='line'><span class="c1">// here we&#39;ll just check if everything is rendered at this point in time.</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p strong&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h2&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take the example apart, play with it and try to figure out what works
and what doesn&#8217;t :)</p>

<p>If you see</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">assertion</span> <span class="nx">failed</span><span class="o">:</span> <span class="nx">You</span> <span class="nx">have</span> <span class="nx">turned</span> <span class="nx">on</span> <span class="nx">testing</span> <span class="nx">mode</span><span class="p">,</span> <span class="nx">which</span> <span class="nx">disabled</span> <span class="nx">the</span> <span class="nx">run</span><span class="o">-</span><span class="nx">loop</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">autorun</span><span class="p">.</span>
</span><span class='line'><span class="nx">You</span> <span class="nx">will</span> <span class="nx">need</span> <span class="nx">to</span> <span class="nx">wrap</span> <span class="nx">any</span> <span class="nx">code</span> <span class="kd">with</span> <span class="nx">asynchronous</span> <span class="nx">side</span><span class="o">-</span><span class="nx">effects</span> <span class="k">in</span> <span class="nx">an</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>it means that you forgot to wrap something in <code>Ember.run</code>. I hope this
is a good enough introduction. In one of the upcoming articles we&#8217;ll
take a look at simple Ember application and try testing it with a
full featured testing framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[render, control, partial, view, template]]></title>
    <link href="http://darthdeus.github.io/blog/2013/02/10/render-control-partial-view/"/>
    <updated>2013-02-10T21:29:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/02/10/render-control-partial-view</id>
    <content type="html"><![CDATA[<p>There are many ways one can DRY up templates when using Ember.js, it all
depends on what you&#8217;re trying to achieve.</p>

<h2>partial &amp;&amp; template</h2>

<p><code>{{partial "foo"}}</code> will take a template
<code>foo.handlebars</code> and insert it without changing anything, which is
exactly the same as in Rails. There are no views created, no scope
changes, it just inserts the template right there.</p>

<p><code>{{template}}</code> isn&#8217;t really meant to be used anymore, so use
<code>{{partial}}</code> instead.</p>

<h2>view</h2>

<p><code>{{view App.FooView}}</code> will create an instance of
<code>App.FooView</code> (with <code>foo.handlebars</code> template unless you override the
name) and insert it in place. You can bind on properties of the view,
such as <code>{{view App.FooView contentBinding="foobar"}}</code>,
or just specify a property directly <code>{{view App.FooView class="foobar"}}</code>.</p>

<p>This is a low level thing and is mostly used to instantiate simple
views, such as <code>{{view Ember.TextField valueBinding="name" class="username"}}</code></p>

<h2>render &amp;&amp; control</h2>

<p>Most of the time you&#8217;re looking to use <code>{{render}}</code> instead of
<code>{{view}}</code> as it offers better means of
abstraction. <code>{{render "foo" bar}}</code> will create a
<code>App.FooController</code> and bind it&#8217;s content to <code>bar</code>.  It also creates a
<code>App.FooView</code> and renders a <code>foo</code> template.</p>

<p>One drawback is that <code>{{render}}</code> <strong>can not be called multiple times on
a single route</strong>. If you need a self sustainable widget which can be
created any number of times you want, you&#8217;re looking for <code>{{control}}</code>
which has exactly the same effect as <code>{{render}}</code>, but it will have a new
controller instance every time you call it, while <code>{{render}w</code> uses a
singleton controller.</p>

<p>Please keep in mind that <code>{{control}}</code> is currently under heavy
development and will probably change soon, because of the high number of
issues there are with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Router Request Lifecycle]]></title>
    <link href="http://darthdeus.github.io/blog/2013/02/08/router-request-lifecycle/"/>
    <updated>2013-02-08T16:59:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/02/08/router-request-lifecycle</id>
    <content type="html"><![CDATA[<p>Router is the core part of Ember. Every time we go to a new URL it means
the
route object is called with our params and stuff. These are the hooks
sorted in order in which they are called</p>

<ul>
<li>enter (private)</li>
<li>activate - executed when entering the route</li>
<li>deserialize (private)</li>
<li>model (formely deserialize) - takes the params and returns a model
which is set to the route&#8217;s <code>currentModel</code></li>
<li>serialize - used to generate dynamic segments in the URL from a model</li>
<li>setupController - takes <code>currentModel</code> and sets it to the controller&#8217;s
<code>content</code> by default</li>
<li>renderTemplate - takes current controller and what <code>model</code> returns and
renders the template with an appropriate name</li>
<li>deactivate - executed when exiting the route (called by exit
internally)</li>
<li>exit (private, requires call to <code>this._super</code>)</li>
</ul>


<p>Now let&#8217;s take a look at them in more detail</p>

<h2><code>activate</code>/<code>deactivate</code></h2>

<p>These were formely known as <code>enter</code>/<code>exit</code>, which are now marked as
private. <code>activate</code> will be executed when user enters a route, be it
from a transition or from a URL directly, and <code>deactivate</code> is executed
when user transitions away from the route.</p>

<p>One of the most common use cases for me is doing a transaction rollback
in <code>deactivate</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostsNewRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">deactivate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s2">&quot;postsNew&quot;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;transaction&quot;</span><span class="p">).</span><span class="nx">rollback</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find this mostly useful when having a <em>new record form</em> (or even when
editing a record), where you basically want to rollback any changes
which happened when the user exits the route. It doesn&#8217;t matter if the
user submits the form first, because then the transaction will be
comitted and there will be nothing to rollback.</p>

<h2><code>model</code>/<code>serialize</code></h2>

<p>To allow Ember to work with dynamic segments in the URLs we need to
teach it how to serialize and deserialize our models. When we enter a
URL directly (or reload the page) <code>model</code> will be called with params
from the dynamic segments. Let&#8217;s take a look at an example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/:post_id&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">post_id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is exactly what Ember will auto generate for us, along with a
serialize hook</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">post_id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">post_id</span><span class="o">:</span> <span class="nx">model</span><span class="p">.</span><span class="nx">id</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>it is important to note here that if we&#8217;re transitioning from a
different route our <code>model</code> hook <em>will not be called</em>.</p>

<h2><code>setupController</code></h2>

<p>One step further after <code>model</code> comes <code>setupController</code>, which is meant
to set additional properties on the controller, or override it&#8217;s
<code>content</code>.</p>

<p>But beware, there is no autogenerated <code>setupController</code> hook which sets to <code>content</code>,
this is done even before <code>setupController</code> is called <a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-routing/lib/system/route.js#L79-82">in the <code>setup</code> hook</a> of the route. This is basically simulates the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="nx">model</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it also means we can set additional properties on the controller
without needing to explicitly set the content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>renderTemplate</code></h2>

<p>The last one of the hooks is <code>renderTemplate</code> where you tell which
template you want to render in which outlet.</p>

<p>By default <code>renderTemplate</code> will call <code>this.render</code> as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostRoute</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">renderTemplate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">into</span><span class="o">:</span> <span class="s2">&quot;application&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">outlet</span><span class="o">:</span> <span class="s2">&quot;main&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;post&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case <code>render</code> will render the <code>post</code> template into the
<code>application</code> template&#8217;s <code>main</code> outlet with the <code>PostController</code>.</p>

<p>This is the place where you can chose to render into other outlets. For
example let&#8217;s say that your <code>application</code> template has a sidebar outlet
&#8220;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostRoute</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">renderTemplate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// render with the defaults</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// and once more for the sidebar outlet</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;similarPosts&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">into</span><span class="o">:</span> <span class="s2">&quot;application&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">outlet</span><span class="o">:</span> <span class="s2">&quot;sidebar&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Important notes about <code>controllerFor</code> and <code>modelFor</code></h2>

<p>While calling <code>controllerFor("posts")</code> returns an instance of
<code>PostsController</code>, calling <code>modelFor("posts")</code> <strong>doesn&#8217;t return
<code>content</code>
of the <code>PostController</code></strong>. Instead it looks up the <code>PostsRoute</code> and
returns it&#8217;s <code>currentModel</code> which is set when we return a value from the
<code>model</code> hook.</p>

<p>Let&#8217;s see an example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will cause issues if we decide to use <code>modelFor</code> later on.
<code>PostsRoute</code> will not have anything in <code>currentModel</code> and <code>modelFor</code>
will return undefined, which might look weird as the controller has a
content properly set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Transactions in Ember Data - part 1]]></title>
    <link href="http://darthdeus.github.io/blog/2013/02/02/using-transactions-in-ember-data/"/>
    <updated>2013-02-02T14:15:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/02/02/using-transactions-in-ember-data</id>
    <content type="html"><![CDATA[<p>We talked about transactions in <a href="http://darthdeus.github.com/blog/2013/01/27/ember-data-in-depth/">one of the previous articles</a>
(read it if you haven&#8217;t already), but we didn&#8217;t really touch on when to
use them in real world. One of the most common use cases for me is when
I just want to manage a single record while there are many changes
happening on the page.</p>

<p>Adding a record to a transaction is simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// say that we are in a controller</span>
</span><span class='line'><span class="nx">store</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;store&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this ALWAYS returns a new transaction</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// =&gt; &quot;&lt;DS.Transaction:ember955&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is obvious, but what if we need to commit the transaction in a
completely different action? Do we need to store the instance somewhere
to use it later?</p>

<p>The answer is NO, we can always return the transaction in which the
record is by calling <code>.get("transaction")</code>. We can even do it if we
decide to fetch the user again in a completely different part of the
application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;transaction&quot;</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// =&gt; &quot;&lt;DS.Transaction:ember955&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&#8217;t matter in which part of the application you add the record to
a transaction because you can always retrieve the correct instance
later.</p>

<p>Which allows us to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersNewRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">transaction</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;store&quot;</span><span class="p">).</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">transaction</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">createUser</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;transaction&quot;</span><span class="p">).</span><span class="nx">commit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally I use this when I only care about one record, but I know that
there might be other which are <code>dirty</code> and I don&#8217;t want to commit those.
This happens almost every time you have two forms displayed at once.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js Router and Template Naming Convention]]></title>
    <link href="http://darthdeus.github.io/blog/2013/02/01/ember-dot-js-router-and-template-naming-convention/"/>
    <updated>2013-02-01T19:43:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/02/01/ember-dot-js-router-and-template-naming-convention</id>
    <content type="html"><![CDATA[<p>Ever since the change to <code>resource</code> and <code>route</code> a lot of people are
confused about the meaning of the two and how they affect naming. Here&#8217;s
the difference:</p>

<ul>
<li><code>resource</code> - a thing</li>
<li><code>route</code> - something to do with the thing</li>
</ul>


<p>Let&#8217;s say we have a model <code>App.Post</code> and we want to show a list of posts
and a new post form. There are many ways you can go about this, so let&#8217;s
start with the simplest.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/new&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would result in the following template structure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">data-template-name=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">...</span> <span class="nx">list</span> <span class="nx">the</span> <span class="nx">posts</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">data-template-name=</span><span class="s">&quot;new&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">...</span> <span class="k">new</span> <span class="nx">post</span> <span class="nx">template</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the following naming</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostsRoute</span>
</span><span class='line'><span class="nx">PostsController</span>
</span><span class='line'><span class="nx">PostsView</span>
</span><span class='line'><span class="nx">NewRoute</span>
</span><span class='line'><span class="nx">NewController</span>
</span><span class='line'><span class="nx">NewView</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jsbin.com/ogorab/33/edit">Here&#8217;s a JSBin</a></p>

<p>This is almost never useful, since you might have many <code>/new</code> actions
and you&#8217;d need to scope them to the resource, which would be done as
follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/new&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here things get a little more complicated, since we&#8217;re nesting something
inside the resource. This means that we&#8217;ll end up with three templates
instead of two</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">data-template-name=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">outlet</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p"></span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">data-template-name=</span><span class="s">&quot;posts/index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">...</span> <span class="nx">list</span> <span class="nx">the</span> <span class="nx">posts</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">data-template-name=</span><span class="s">&quot;posts/new&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">...</span> <span class="k">new</span> <span class="nx">post</span> <span class="nx">template</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the following naming</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostsRoute</span>
</span><span class='line'><span class="nx">PostsController</span>
</span><span class='line'><span class="nx">PostsView</span>
</span><span class='line'>
</span><span class='line'><span class="nx">PostsIndexRoute</span>
</span><span class='line'><span class="nx">PostsIndexController</span>
</span><span class='line'><span class="nx">PostsIndexView</span>
</span><span class='line'>
</span><span class='line'><span class="nx">PostsNewRoute</span>
</span><span class='line'><span class="nx">PostsNewController</span>
</span><span class='line'><span class="nx">PostsNewView</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jsbin.com/ogorab/34/edit">Here&#8217;s a JSBin</a></p>

<p>This means whenever you create a resource it will create a brand new
namespace. That namespace will have an &#8220; which is named after the
resource and all of the child routes will be inserted into it.</p>

<p>There are many reasons behind it, but let&#8217;s try another example which
will make it more obvious. We will add a <code>/:post_id</code> and
<code>/:post_id/edit</code> routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/:post_id&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/edit&quot;</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/new&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Additional to the routes in the previous example, this will give us</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// IMPORTANT - it&#39;s not PostsPostRoute, because `resource`</span>
</span><span class='line'><span class="c1">// always creates a new namespace</span>
</span><span class='line'><span class="nx">PostRoute</span>
</span><span class='line'><span class="nx">PostController</span>
</span><span class='line'><span class="nx">PostView</span>
</span><span class='line'>
</span><span class='line'><span class="nx">PostIndexRoute</span>
</span><span class='line'><span class="nx">PostIndexController</span>
</span><span class='line'><span class="nx">PostIndexView</span>
</span><span class='line'>
</span><span class='line'><span class="nx">PostEditRoute</span>
</span><span class='line'><span class="nx">PostEditController</span>
</span><span class='line'><span class="nx">PostEditView</span>
</span></code></pre></td></tr></table></div></figure>


<p>Templates are named accordingly <code>post</code>, <code>post.index</code> and <code>post.edit</code>,
<strong>there is nothing like <code>posts.post.index</code> or <code>posts.post</code> or
<code>posts.post.edit</code></strong>.</p>

<p><a href="http://jsbin.com/ogorab/35/edit">Here&#8217;s a JSBin</a></p>

<p>But the problem is when we try to access the <code>App.Post</code> model from the
<code>post/index</code> or <code>post/edit</code> template. It is only available in the <code>post</code>
template with the outlet. Now why is that?</p>

<p>Since we are defining a <code>resource</code> it is expected that the child routes
will be related to that <code>resource</code>, that&#8217;s why they don&#8217;t need to load
it separately. They can access it from the parent <code>PostController</code> via
<code>needs</code> (<a href="http://darthdeus.github.com/blog/2013/01/27/controllers-needs-explained/">more about that can be found in this article</a></p>

<p><a href="http://jsbin.com/ogorab/44/edit">Here&#8217;s a JSBin</a></p>

<p>This is the general pattern you would be using if you want to nest
everything. But what if you don&#8217;t want to render <code>post</code> into the
<code>posts</code> outlet? Well nothing prevents you from defining the routes as
this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;new&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/new&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/:post_id&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/edit&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is the difference? The naming remains exactly the same as in the
previous example, even templates are named the same. But the <code>post</code>
template will be inserted into the <code>application</code> layout, not inside the
<code>posts</code> layout. This is the case when you want the detail <code>post</code> page to
replace the whole layout, instead of just showing it together with the
<code>posts</code> list.</p>

<p>I hope the examples will help you understanding how the v2 routes work,
since this is a completely essential part of Ember.js.</p>

<p>If you have any questions, leave them in the comments or tweet me
<a href="http://twitter.com/darthdeus">@darthdeus</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to find a model by any attribute in Ember.js]]></title>
    <link href="http://darthdeus.github.io/blog/2013/01/31/how-to-find-a-model-by-any-attribute-in-ember-dot-js/"/>
    <updated>2013-01-31T23:13:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/01/31/how-to-find-a-model-by-any-attribute-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>One of the common things people ask about Ember Data is how to find a
single record by it&#8217;s attribute. This is because the current revision
(11) only offers three methods of fetching records</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// returns a single user record</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="nx">username</span><span class="o">:</span> <span class="s2">&quot;wycats&quot;</span> <span class="p">})</span> <span class="c1">// returns a ManyArray</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findQuery</span><span class="p">({</span> <span class="nx">username</span><span class="o">:</span> <span class="s2">&quot;wycats&quot;</span> <span class="p">})</span> <span class="c1">// same as the above</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to search for a user by his username, you have two options</p>

<h2>Using .find with <em>smart</em> server side</h2>

<p>The way <code>App.User.find(1)</code> works is that it does a request to
<code>/users/1</code>, which is expected to return just one record.</p>

<p>You could modify your server to accept both <code>username</code> and <code>id</code> on the
<code>/users/1</code> path, which would allow to do <code>App.User.find("wycats")</code>.</p>

<p>There&#8217;s an issue with this though. If you load the same user via his
<code>username</code> and <code>id</code>, you&#8217;ll end up with two records stored in the Ember
identity map.</p>

<p>Which basically means that if you try to retrieve all of the user
records, you will end up with that one user twice.</p>

<p>If you want to read more about this, <a href="https://github.com/emberjs/data/issues/571">checkout this GitHub
issue</a></p>

<h2>Using a findQuery</h2>

<p>This might not seem like the right solution at first, since it returns a
<code>DS.ManyArray</code> instead of just one record, but hang on.</p>

<p><code>DS.ManyArray</code> is a subclass of <code>DS.RecordArray</code>, which includes a
<code>DS.LoadPromise</code>.</p>

<p>To understand how <code>DS.LoadPromise</code> works, we need to understand what
promises are. <a href="https://gist.github.com/3889970">There&#8217;s a great article about
that</a>, so I won&#8217;t go into much detail.</p>

<p>Promise is basically an async monad (I guess that doesn&#8217;t help, let&#8217;s
try again).</p>

<p>Promise is something which allows you to return an object which wraps
around a value, even if you don&#8217;t have the value yet. For example if
you&#8217;re doing <code>App.User.findQuery</code>, you&#8217;ll get back an empty
<code>DS.ManyArray</code> instantly.</p>

<p>It doesn&#8217;t wait until the AJAX request is finished, it just returns the
empty array, which is populated with the data once the request finishes.</p>

<p>This works because Ember uses data bindings and will automagically
update all of the views once the data is loaded. And also because the
router will wait if it&#8217;s model has a state <code>isLoading</code>. That way you
won&#8217;t display a page which is half loaded.</p>

<h2>Implementation</h2>

<p>Now that we know we&#8217;re getting a <code>DS.ManyArray</code>, we need to figure out a
way to make it represent only the value of it&#8217;s first element, because
that&#8217;s what we care about.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findQuery</span><span class="p">({</span> <span class="nx">username</span><span class="o">:</span> <span class="nx">username</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">users</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s2">&quot;didLoad&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">users</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">users</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;firstObject&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">users</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that we are returning the result of the <code>findQuery</code>
instantly, but we&#8217;re also setting an asynchronous callback which
<strong>resolves the promise</strong> to the <code>firstObject</code> once it is loaded.</p>

<p>Another way you could read the <code>resolve(x)</code> is <em>from now you&#8217;re
representing value <code>x</code></em>. Using this technique will work in all Ember,
because the data bindings will take care of everything. Always remember
that you don&#8217;t need to worry about re-rendering your views, just change
the data and Ember will take care of the rest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller, ObjectController and ObjectProxy]]></title>
    <link href="http://darthdeus.github.io/blog/2013/01/27/controller-objectcontroller-and-objectproxy/"/>
    <updated>2013-01-27T19:24:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/01/27/controller-objectcontroller-and-objectproxy</id>
    <content type="html"><![CDATA[<p>When you first come to Ember, you&#8217;ll soon stumble upon three things:</p>

<ul>
<li><code>Ember.Controller</code></li>
<li><code>Ember.ObjectController</code></li>
<li><code>Ember.ArrayController</code></li>
</ul>


<p>For some people (including me) it is not very clear what&#8217;s the
difference between the first two.</p>

<p><code>Ember.Controller</code> is just a plain implementation of
<code>Ember.ControllerMixin</code>, while <code>Ember.ObjectController</code> is a subclass of
<code>Ember.ObjectProxy</code>. This is a huge difference! Let&#8217;s take a look at how
<code>Ember.ObjectProxy</code> works, and as always starting with a code sample
(<a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-runtime/lib/system/object_proxy.js#L35-L50">taken from the excellent source code documentation</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">object</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">proxy</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectProxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">content</span><span class="o">:</span> <span class="nx">object</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Access and change existing properties</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">object</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; &quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create new &quot;description&quot; property on `object`</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">object</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">)</span> <span class="c1">// =&gt; &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is really no magic. In the basic usage, <code>Ember.ObjectProxy</code> will
delegate all of it&#8217;s unknown properties to the <code>content</code> object, with
one exception.</p>

<p>If we try to set a new property on a proxy while it&#8217;s content is
undefined, we will get an exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">proxy</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectProxy</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="c1">// raises the following exception</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cannot</span> <span class="nx">delegate</span> <span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">bar</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">the</span> <span class="s1">&#39;content&#39;</span> <span class="nx">property</span>
</span><span class='line'><span class="nx">of</span> <span class="nx">object</span> <span class="nx">proxy</span> <span class="o">&lt;</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectProxy</span><span class="o">:</span><span class="nx">ember420</span><span class="o">&gt;:</span> <span class="nx">its</span> <span class="s1">&#39;content&#39;</span> <span class="nx">is</span> <span class="kc">undefined</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve stumbled upon this in one scenario, where I didn&#8217;t set content for
my <code>ObjectController</code>, but I tried to modify one of it&#8217;s properties.
Raising the exception is a good example of failing fast, rather than
silently swallowing errors.</p>

<p>This being said you should almost always use <code>Ember.ObjectController</code>
over <code>Ember.Controller</code>, unless you know what you&#8217;re doing :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State Manager and Friends - part 1]]></title>
    <link href="http://darthdeus.github.io/blog/2013/01/27/state-manager-and-friends/"/>
    <updated>2013-01-27T19:23:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/01/27/state-manager-and-friends</id>
    <content type="html"><![CDATA[<p>Since state management is such a huge part of Ember.js it desrves a
dedicated article. I&#8217;m not going to explain the old router which used
<code>Ember.StateManager</code> to do it&#8217;s bidding. Those days are over and we
should all be moving towards the v2 router (or v2.2 so to speak).
Instead we&#8217;re going to go deep into the <code>Ember.StateManager</code>.</p>

<p>In the general concept, state manager is basically some object which
manages states and the transitions between them, thus representing a
finite state machine.</p>

<p>Let&#8217;s say we have a <code>Post</code> which can be in two states, <code>draft</code> and
<code>published</code>. It begins it&#8217;s life as a <code>draft</code> and when we <code>publish</code> it,
it should send out a notification email. The way Ember would handle this
is that it would assign a <code>Ember.StateManager</code> instance to the <code>Post</code>
instance and have that manage it&#8217;s state (that&#8217;s not exactly true in
Ember Data, but we&#8217;ll get into that).</p>

<p>For now let&#8217;s just say that this is the code we have</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostManager</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">StateManager</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">states</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">draft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">published</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Post</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;stateManager&quot;</span><span class="p">,</span> <span class="nx">PostManager</span><span class="p">.</span><span class="nx">create</span><span class="p">());</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a really basic implementation. I&#8217;m setting the
<code>stateManager</code> property in the <code>init</code> function to avoid sharing the
instance across multiple <code>Post</code> instances. I&#8217;ll explain this in a
followup article, for now just remember that if you need to set a
property to an object instance, you have to do that in the <code>init</code>
function, not directly like <code>stateManager: PostManager.create()</code>.</p>

<p>OK, we are now ready to list all of the states a <code>Post</code> can have.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.states&quot;</span><span class="p">);</span> <span class="c1">// =&gt; { draft: ..., published: ... }</span>
</span><span class='line'>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState&quot;</span><span class="p">);</span> <span class="c1">// =&gt; null</span>
</span></code></pre></td></tr></table></div></figure>


<p>We forgot to say which of the states should be the default. Let&#8217;s
do that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostManager</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">StateManager</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">initialState</span><span class="o">:</span> <span class="s2">&quot;draft&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">states</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">draft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">published</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>From now every single post we create will be a <code>draft</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">);</span> <span class="c1">// =&gt; &quot;draft&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can also make it transition into another state</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager&quot;</span><span class="p">).</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s2">&quot;published&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">);</span> <span class="c1">// =&gt; &quot;published&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <code>Ember.StateManager</code> can do more than that. We can hook into both
<code>enter</code> and <code>exit</code> events on each state and do some magic! Let&#8217;s
redefine our state manager as this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostManager</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">StateManager</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">initialState</span><span class="o">:</span> <span class="s2">&quot;draft&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">states</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">draft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">published</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">enter</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;post was published&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager&quot;</span><span class="p">).</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s2">&quot;published&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// console prints &quot;post was published&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Understanding how this class works is essential for any Ember developer,
as it is being used in almost every part of the framework. We&#8217;ll take at
some specific examples in the second part of this artcile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concatenated Properties]]></title>
    <link href="http://darthdeus.github.io/blog/2013/01/27/concatenated-properties/"/>
    <updated>2013-01-27T18:18:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/01/27/concatenated-properties</id>
    <content type="html"><![CDATA[<p>As some of you might now, Ember provides you with something called
<em>concatenated property</em>. Their main use case is internal, which means
you are unlikely to have the need to use them in your own application.
There are some places in Ember where you might be surprised by how
things behave and this might be one of those. Let&#8217;s start with an
example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserView</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;user&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserView</span><span class="p">.</span><span class="nx">create</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;classNames&quot;</span><span class="p">)</span> <span class="c1">// =&gt; [&quot;ember-view&quot;, &quot;user&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you might be asking, where is the <code>"ember-view"</code> coming from? Time
for another example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">DetailUserView</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;more&quot;</span><span class="p">,</span> <span class="s2">&quot;detail&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">DetailUserView</span><span class="p">.</span><span class="nx">create</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;classNames&quot;</span><span class="p">)</span> <span class="c1">// =&gt; [&quot;ember-view&quot;, &quot;user&quot;, &quot;more&quot;, &quot;detail&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This must be some sorcery! It seems that <code>classNames</code> aren&#8217;t overwritten
in the subclass, but rather concatenated to the superclass&#8217; value of
that property. This works even when you overwrite it in an instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;cat&quot;</span><span class="p">]</span> <span class="p">}).</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;classNames&quot;</span><span class="p">)</span> <span class="c1">// =&gt; [&quot;ember-view&quot;, &quot;cat&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple glance at the <a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-views/lib/views/view.js#L756"><code>Ember.View</code></a> source code reveals it&#8217;s secrets</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">CoreView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">concatenatedProperties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;classNames&#39;</span><span class="p">,</span> <span class="s1">&#39;classNameBindings&#39;</span><span class="p">,</span> <span class="s1">&#39;attributeBindings&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// more stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this still doesn&#8217;t make any sense to you, just go take a look at <a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/tests/mixin/concatenatedProperties_test.js">the
tests for concatenated properties</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Data in Depth]]></title>
    <link href="http://darthdeus.github.io/blog/2013/01/27/ember-data-in-depth/"/>
    <updated>2013-01-27T13:52:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/01/27/ember-data-in-depth</id>
    <content type="html"><![CDATA[<p>This is a guide explaining how Ember Data works internaly. My initial
motivation for writing this is to understand Ember better myself. I&#8217;ve
found that every time I understand something about how Ember works, it
improves my application code.</p>

<h2>Main parts</h2>

<p>First we need to understand what are the main concepts. Let&#8217;s start with
a simple example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s dive deep into this. There are four important concepts, two of
which are basic Ember.js and we&#8217;re going to skip them</p>

<ul>
<li><code>App.User</code> represents a <code>User</code> class in the <code>App</code> namespace</li>
<li><code>username</code> represents a property on the <code>User</code> class</li>
</ul>


<p>These are the basics and you should be familiar with them to understand
the rest of this guide. Next we have <code>DS.Model</code> and <code>DS.attr</code>:</p>

<h2>DS.Model and DS.attr</h2>

<p><code>DS.Model</code> is one of the core concepts in Ember Data and it represents a
single <em>resource</em>. Models can have relationships with other models,
similar to how you&#8217;d model your data in a relational database. But let&#8217;s
ignore that for now.</p>

<p><code>DS.Model</code> is both a state machine and a promise. If you don&#8217;t
understand what promises are, please take a look at <a href="https://gist.github.com/3889970">this awesome
article</a> which explains them in depth.</p>

<p>State machines are used throughout Ember and they basically represent something <em>which can have multiple states and can transition between the states</em>. For example <code>DS.Model</code> can have the following states (<em><a href="http://emberjs.com/guides/models/model-lifecycle/">taken from the official Ember guide</a></em>):</p>

<ul>
<li><code>isLoaded</code> - The adapter has finished retrieving the current state of the record from its backend.</li>
<li><code>isDirty</code> - The record has local changes that have not yet been saved by the adapter. This includes records that have been created (but not yet saved) or deleted.</li>
<li><code>isSaving</code> - The record has been sent to the adapter to have its changes saved to the backend, but the adapter has not yet confirmed that the changes were successful.</li>
<li><code>isDeleted</code> - The record was marked for deletion. When <code>isDeleted</code> is true and <code>isDirty</code> is <code>true</code>, the record is deleted locally but the deletion was not yet persisted. When <code>isSaving</code> is true, the change is in-flight. When both <code>isDirty</code> and <code>isSaving</code> are <code>false</code>, the change has been saved.</li>
<li><code>isError</code> - The adapter reported that it was unable to save local changes to the backend. This may also result in the record having its <code>isValid</code> property become false if the adapter reported that server-side validations failed.</li>
<li><code>isNew</code> - The record was created locally and the adapter did not yet report that it was successfully saved.
<code>isValid</code> No client-side validations have failed and the adapter did not report any server-side validation failures.</li>
</ul>


<p>We can also bind to these with event handlers, which will be explained later, but for now let&#8217;s just list them:</p>

<ul>
<li><code>didLoad</code></li>
<li><code>didCreate</code></li>
<li><code>didUpdate</code></li>
<li><code>didDelete</code></li>
<li><code>becameError</code></li>
<li><code>becameInvalid</code></li>
</ul>


<p><em><a href="https://github.com/emberjs/data/blob/f274153754cb8b629cd98fc6c590f18bc8ee3ff6/packages/ember-data/lib/system/model/states.js#L223-L245">I would also encourage you to go take a look at the source documentation on GitHub</a></em></p>

<p>It is important for us to understand what each state means, because they
can affect how our application behaves. For example if we try to modify
a record which is already being saved, we will get an exception saying
something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Attempted</span> <span class="nx">to</span> <span class="nx">handle</span> <span class="nx">event</span> <span class="err">`</span><span class="nx">willSetProperty</span><span class="err">`</span> <span class="nx">on</span> <span class="o">&lt;</span><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="o">:</span><span class="nx">ember1144</span><span class="o">:</span><span class="kc">null</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">while</span> <span class="k">in</span> <span class="nx">state</span> <span class="nx">rootState</span><span class="p">.</span><span class="nx">loaded</span><span class="p">.</span><span class="nx">created</span><span class="p">.</span><span class="nx">inFlight</span><span class="p">.</span> <span class="nx">Called</span> <span class="kd">with</span>
</span><span class='line'><span class="p">{</span><span class="nx">reference</span><span class="o">:</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">],</span> <span class="nx">store</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">App</span><span class="p">.</span><span class="nx">Store</span><span class="o">:</span><span class="nx">ember313</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">username</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part here is the <code>rootState.loaded.created.inFlight</code>. If
we look at <a href="https://github.com/emberjs/data/blob/f274153754cb8b629cd98fc6c590f18bc8ee3ff6/packages/ember-data/lib/system/model/states.js#L254-L261">the source of <code>DirtyState</code></a>, we can see what this means</p>

<blockquote><p>Dirty states have three child states:</p>

<ul>
<li><code>uncommitted</code>: the store has not yet handed off the record to be saved.</li>
<li><code>inFlight</code>: the store has handed off the record to be saved, but the adapter has not yet acknowledged success.</li>
<li><code>invalid</code>: the record has invalid information and cannot be send to the adapter yet.</li>
</ul>
</blockquote>

<p>Let&#8217;s go through the record lifecycle and observe it&#8217;s state. We can do
this by doing <code>.get("stateManager.currentState.name")</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isLoaded&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; loaded</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isLoaded&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true, which means comitting the transaction will save the record</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; uncommitted</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;transaction&quot;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'><span class="c1">// while the record is being saved</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; inFlight</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isSaving&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="c1">// after the record was saved</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; saved</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Transactions and <code>commit()</code></h2>

<p>In the previous example, we&#8217;ve used <code>get("transaction").commit()</code> to
persist the changes to the server. <code>.commit()</code> will take all <code>dirty</code>
records in the transaction and persiste them to the server.</p>

<p>A record becomes dirty whenever one of it&#8217;s attributes change. For
example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we create a new record, it will be dirty by default</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">()</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/emberjs/data/pull/646">Currently there&#8217;s a regression</a>
that we change an attribute to something else, and then back to the
original value, the record will be marked as dirty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">originalUsername</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nx">originalUsername</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true, even though it should be false</span>
</span></code></pre></td></tr></table></div></figure>


<p>But let&#8217;s hope this will be fixed soon.</p>

<h2>Transactions</h2>

<p>Until now we assumed that there is some <em>global</em> transaction which is
the same for every single model. But this doesn&#8217;t have to be true. We
can create our own transactions and manage them at our will.</p>

<p>I recommend you take a look at <a href="https://github.com/emberjs/data/blob/master/packages/ember-data/tests/integration/transactions/basic_test.js">the tests for transactions in Ember Data
repository</a>.
They basically show all of the scenarios which you can encounter. For
example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'><span class="nx">record</span> <span class="o">=</span> <span class="nx">transaction</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// this will save the record to the server</span>
</span><span class='line'>
</span><span class='line'><span class="nx">record</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing is committed here, because the record</span>
</span><span class='line'>                      <span class="c1">// is removed from the transaction when it is saved</span>
</span><span class='line'>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// this will save the record properly</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also add a record to a transaction, which will remove it from the
global transaction. Important thing to note here is that
<a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/store.js#L127-L129"><code>store.transaction()</code></a>
<strong>always returns a new transaction</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing happens</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// user is saved</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same goes for deleting records</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">deleteRecord</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing happens</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// user is deleted</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also remove a record from a transaction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing happens</span>
</span></code></pre></td></tr></table></div></figure>


<p>One scenario when transactions can be useful is when you just need to
change one record, without affecting changes to other records. You can
put that change in a separate transaction, instead of just doing
<code>store.commit()</code>.</p>

<p>Important thing to note here is that there&#8217;s a <code>defaultTransaction</code> for
the store to which you can get via <code>store.get("defaultTransaction")</code>.
This is where all of the records are placed, unless you explicitly
create a new transaction and assign a record to it.</p>

<p>These two are completely equivalent</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;defaultTransaction&quot;</span><span class="p">).</span><span class="nx">commit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just take a look at how <code>store.commit()</code> is defined</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">commit</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;defaultTransaction&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>commit()</code></h2>

<p>Now that we understand how transactions work, let&#8217;s dig deep into
<code>store.commit()</code>. First thing we need to understand here is that Ember
Transactions use this thing called <code>bucket</code> to store records with
various states in. This is first initialized in the <a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/transaction.js#L91-L101"><code>init</code> method of
<code>DS.Transaction</code></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;buckets&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clean</span><span class="o">:</span>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">created</span><span class="o">:</span>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">updated</span><span class="o">:</span>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">deleted</span><span class="o">:</span>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">inflight</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;relationships&#39;</span><span class="p">,</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each bucket represents one state in which a record can possibly be.
These are used in many different places in the transaction, and every
time a method changes it&#8217;s state, it will be moved to a corresponding
bucket</p>

<figure class='code'><figcaption><span>Example of recordBecameDirty</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">recordBecameDirty</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bucketType</span><span class="p">,</span> <span class="nx">record</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">removeFromBucket</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span> <span class="nx">record</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">addToBucket</span><span class="p">(</span><span class="nx">bucketType</span><span class="p">,</span> <span class="nx">record</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>More content will be coming soon</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller's Needs Explained]]></title>
    <link href="http://darthdeus.github.io/blog/2013/01/27/controllers-needs-explained/"/>
    <updated>2013-01-27T11:53:00+01:00</updated>
    <id>http://darthdeus.github.io/blog/2013/01/27/controllers-needs-explained</id>
    <content type="html"><![CDATA[<p>Since the v2 router came it became clear that using global singleton
controllers like <code>App.userController = App.UserController.create()</code> is
not the way to go. This prevents us from doing a simple binding like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">accountsBinding</span><span class="o">:</span> <span class="s2">&quot;App.accountsController.content&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no need or even possibility to manage the controller instances
with the new router though. It will create the instance for us. One way
we can use this is with <code>this.controllerFor</code>, which can be used inside
of a route.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// some magic with `this.controllerFor(&quot;user&quot;)`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>but since this method is only available on the route and not inside a
controller, it wasn&#8217;t very pleasant to specify dependencies (or needs)
between controllers. Which is exactly where needs come in and solve the
issue</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">needs</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>this will give you the opportunity to call <code>controllers.foo</code> on the
<code>App.UserController</code> instance and get back an instance of
<code>App.FooController</code>. You could even (ab)use that in the templates like
this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- inside `users` template --&gt;</span>
</span><span class='line'>{{controllers.foo}}
</span></code></pre></td></tr></table></div></figure>


<h2>Needs vs routing</h2>

<p>Needs become incredibly useful when you have nested routes, for example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/posts/:post_id&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/edit&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case we will get <code>post</code>, <code>post.index</code> and <code>post.edit</code>. If you go
to <code>/posts/1</code> you expect to get <code>post.index</code> template, which is true,
but the context (or model, or content) is being set on the
<code>PostController</code>, not on <code>PostIndexController</code>.</p>

<p>When you think about it it does make sense, because the <code>resource</code> is
basically shared between <code>post.index</code> and <code>post.edit</code>, that&#8217;s why it is
fetched and stored in their parent. Let&#8217;s go through this in detail:</p>

<ul>
<li>visit <code>/posts/1</code></li>
<li>router basically does <code>App.Post.find(1)</code> <strong>and assigns that to the
content of <code>PostController</code></strong></li>
<li>template <code>post</code> is rendered</li>
<li>template <code>post.index</code> is rendered in <code>post</code>&#8217;s outlet</li>
</ul>


<p>and when you transition to <code>/posts/1/edit</code>, the only thing that changes
is the leaf route, you still keep the same <code>App.Post</code> model, because it
belongs to the parent <code>PostRoute</code>, not to the leaf <code>PostIndexRoute</code>. But
this has a drawback. You&#8217;re not able to directly access the content from
the <code>post.index</code> template, since it doesn&#8217;t belong to it&#8217;s controller.
That&#8217;s where needs come in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostIndexController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">needs</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;post&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in the <code>post/index</code> template, you can access the content like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{controllers.post.content}}
</span></code></pre></td></tr></table></div></figure>


<p>By specifying the need Ember will make sure that it gives you the right
<code>PostController</code> instance with it&#8217;s content set to the right value.</p>
]]></content>
  </entry>
  
</feed>

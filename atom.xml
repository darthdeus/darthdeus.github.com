<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[darthdeus vs Ember.js]]></title>
  <link href="http://darthdeus.github.com/atom.xml" rel="self"/>
  <link href="http://darthdeus.github.com/"/>
  <updated>2013-01-28T21:46:30+01:00</updated>
  <id>http://darthdeus.github.com/</id>
  <author>
    <name><![CDATA[Jakub Arnold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Controller, ObjectController and ObjectProxy]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/controller-objectcontroller-and-objectproxy/"/>
    <updated>2013-01-27T19:24:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/controller-objectcontroller-and-objectproxy</id>
    <content type="html"><![CDATA[<p>When you first come to Ember, you&#8217;ll soon stumble upon three things:</p>

<ul>
<li><code>Ember.Controller</code></li>
<li><code>Ember.ObjectController</code></li>
<li><code>Ember.ArrayController</code></li>
</ul>


<p>For some people (including me) it is not very clear what&#8217;s the
difference between the first two.</p>

<p><code>Ember.Controller</code> is just a plain implementation of
<code>Ember.ControllerMixin</code>, while <code>Ember.ObjectController</code> is a subclass of
<code>Ember.ObjectProxy</code>. This is a huge difference! Let&#8217;s take a look at how
<code>Ember.ObjectProxy</code> works, and as always starting with a code sample
(<a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-runtime/lib/system/object_proxy.js#L35-L50">taken from the excellent source code documentation</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">object</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">proxy</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectProxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">content</span><span class="o">:</span> <span class="nx">object</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Access and change existing properties</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">object</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; &quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create new &quot;description&quot; property on `object`</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">object</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;description&quot;</span><span class="p">)</span> <span class="c1">// =&gt; &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is really no magic. In the basic usage, <code>Ember.ObjectProxy</code> will
delegate all of it&#8217;s unknown properties to the <code>content</code> object, with
one exception.</p>

<p>If we try to set a new property on a proxy while it&#8217;s content is
undefined, we will get an exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">proxy</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectProxy</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="c1">// raises the following exception</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cannot</span> <span class="nx">delegate</span> <span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">bar</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">the</span> <span class="s1">&#39;content&#39;</span> <span class="nx">property</span>
</span><span class='line'><span class="nx">of</span> <span class="nx">object</span> <span class="nx">proxy</span> <span class="o">&lt;</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectProxy</span><span class="o">:</span><span class="nx">ember420</span><span class="o">&gt;:</span> <span class="nx">its</span> <span class="s1">&#39;content&#39;</span> <span class="nx">is</span> <span class="kc">undefined</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve stumbled upon this in one scenario, where I didn&#8217;t set content for
my <code>ObjectController</code>, but I tried to modify one of it&#8217;s properties.
Raising the exception is a good example of failing fast, rather than
silently swallowing errors.</p>

<p>This being said you should almost always use <code>Ember.ObjectController</code>
over <code>Ember.Controller</code>, unless you know what you&#8217;re doing :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State Manager and Friends - part 1]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/state-manager-and-friends/"/>
    <updated>2013-01-27T19:23:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/state-manager-and-friends</id>
    <content type="html"><![CDATA[<p>Since state management is such a huge part of Ember.js it desrves a
dedicated article. I&#8217;m not going to explain the old router which used
<code>Ember.StateManager</code> to do it&#8217;s bidding. Those days are over and we
should all be moving towards the v2 router (or v2.2 so to speak).
Instead we&#8217;re going to go deep into the <code>Ember.StateManager</code>.</p>

<p>In the general concept, state manager is basically some object which
manages states and the transitions between them, thus representing a
finite state machine.</p>

<p>Let&#8217;s say we have a <code>Post</code> which can be in two states, <code>draft</code> and
<code>published</code>. It begins it&#8217;s life as a <code>draft</code> and when we <code>publish</code> it,
it should send out a notification email. The way Ember would handle this
is that it would assign a <code>Ember.StateManager</code> instance to the <code>Post</code>
instance and have that manage it&#8217;s state (that&#8217;s not exactly true in
Ember Data, but we&#8217;ll get into that).</p>

<p>For now let&#8217;s just say that this is the code we have</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostManager</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">StateManager</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">states</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">draft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">published</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Post</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;stateManager&quot;</span><span class="p">,</span> <span class="nx">PostManager</span><span class="p">.</span><span class="nx">create</span><span class="p">());</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a really basic implementation. I&#8217;m setting the
<code>stateManager</code> property in the <code>init</code> function to avoid sharing the
instance across multiple <code>Post</code> instances. I&#8217;ll explain this in a
followup article, for now just remember that if you need to set a
property to an object instance, you have to do that in the <code>init</code>
function, not directly like <code>stateManager: PostManager.create()</code>.</p>

<p>OK, we are now ready to list all of the states a <code>Post</code> can have.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.states&quot;</span><span class="p">);</span> <span class="c1">// =&gt; { draft: ..., published: ... }</span>
</span><span class='line'>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState&quot;</span><span class="p">);</span> <span class="c1">// =&gt; null</span>
</span></code></pre></td></tr></table></div></figure>


<p>We forgot to say which of the states should be the default. Let&#8217;s
do that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostManager</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">StateManager</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">initialState</span><span class="o">:</span> <span class="s2">&quot;draft&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">states</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">draft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">published</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>From now every single post we create will be a <code>draft</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">);</span> <span class="c1">// =&gt; &quot;draft&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can also make it transition into another state</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager&quot;</span><span class="p">).</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s2">&quot;published&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">);</span> <span class="c1">// =&gt; &quot;published&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <code>Ember.StateManager</code> can do more than that. We can hook into both
<code>enter</code> and <code>exit</code> events on each state and do some magic! Let&#8217;s
redefine our state manager as this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PostManager</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">StateManager</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">initialState</span><span class="o">:</span> <span class="s2">&quot;draft&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">states</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">draft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">published</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">enter</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;post was published&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager&quot;</span><span class="p">).</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s2">&quot;published&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// console prints &quot;post was published&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Understanding how this class works is essential for any Ember developer,
as it is being used in almost every part of the framework. We&#8217;ll take at
some specific examples in the second part of this artcile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concatenated Properties]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/concatenated-properties/"/>
    <updated>2013-01-27T18:18:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/concatenated-properties</id>
    <content type="html"><![CDATA[<p>As some of you might now, Ember provides you with something called
<em>concatenated property</em>. Their main use case is internal, which means
you are unlikely to have the need to use them in your own application.
There are some places in Ember where you might be surprised by how
things behave and this might be one of those. Let&#8217;s start with an
example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserView</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;user&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserView</span><span class="p">.</span><span class="nx">create</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;classNames&quot;</span><span class="p">)</span> <span class="c1">// =&gt; [&quot;ember-view&quot;, &quot;user&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you might be asking, where is the <code>"ember-view"</code> coming from? Time
for another example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">DetailUserView</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;more&quot;</span><span class="p">,</span> <span class="s2">&quot;detail&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">DetailUserView</span><span class="p">.</span><span class="nx">create</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;classNames&quot;</span><span class="p">)</span> <span class="c1">// =&gt; [&quot;ember-view&quot;, &quot;user&quot;, &quot;more&quot;, &quot;detail&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This must be some sorcery! It seems that <code>classNames</code> aren&#8217;t overwritten
in the subclass, but rather concatenated to the superclass&#8217; value of
that property. This works even when you overwrite it in an instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">classNames</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;cat&quot;</span><span class="p">]</span> <span class="p">}).</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;classNames&quot;</span><span class="p">)</span> <span class="c1">// =&gt; [&quot;ember-view&quot;, &quot;cat&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple glance at the <a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-views/lib/views/view.js#L756"><code>Ember.View</code></a> source code reveals it&#8217;s secrets</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">CoreView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">concatenatedProperties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;classNames&#39;</span><span class="p">,</span> <span class="s1">&#39;classNameBindings&#39;</span><span class="p">,</span> <span class="s1">&#39;attributeBindings&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// more stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this still doesn&#8217;t make any sense to you, just go take a look at <a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/tests/mixin/concatenatedProperties_test.js">the
tests for concatenated properties</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Data in Depth]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/ember-data-in-depth/"/>
    <updated>2013-01-27T13:52:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/ember-data-in-depth</id>
    <content type="html"><![CDATA[<p>This is a guide explaining how Ember Data works internaly. My initial
motivation for writing this is to understand Ember better myself. I&#8217;ve
found that every time I understand something about how Ember works, it
improves my application code.</p>

<h2>Main parts</h2>

<p>First we need to understand what are the main concepts. Let&#8217;s start with
a simple example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s dive deep into this. There are four important concepts, two of
which are basic Ember.js and we&#8217;re going to skip them</p>

<ul>
<li><code>App.User</code> represents a <code>User</code> class in the <code>App</code> namespace</li>
<li><code>username</code> represents a property on the <code>User</code> class</li>
</ul>


<p>These are the basics and you should be familiar with them to understand
the rest of this guide. Next we have <code>DS.Model</code> and <code>DS.attr</code>:</p>

<h2>DS.Model and DS.attr</h2>

<p><code>DS.Model</code> is one of the core concepts in Ember Data and it represents a
single <em>resource</em>. Models can have relationships with other models,
similar to how you&#8217;d model your data in a relational database. But let&#8217;s
ignore that for now.</p>

<p><code>DS.Model</code> is both a state machine and a promise. If you don&#8217;t
understand what promises are, please take a look at <a href="https://gist.github.com/3889970">this awesome
article</a> which explains them in depth.</p>

<p>State machines are used throughout Ember and they basically represent something <em>which can have multiple states and can transition between the states</em>. For example <code>DS.Model</code> can have the following states (<em><a href="http://emberjs.com/guides/models/model-lifecycle/">taken from the official Ember guide</a></em>):</p>

<ul>
<li><code>isLoaded</code> - The adapter has finished retrieving the current state of the record from its backend.</li>
<li><code>isDirty</code> - The record has local changes that have not yet been saved by the adapter. This includes records that have been created (but not yet saved) or deleted.</li>
<li><code>isSaving</code> - The record has been sent to the adapter to have its changes saved to the backend, but the adapter has not yet confirmed that the changes were successful.</li>
<li><code>isDeleted</code> - The record was marked for deletion. When <code>isDeleted</code> is true and <code>isDirty</code> is <code>true</code>, the record is deleted locally but the deletion was not yet persisted. When <code>isSaving</code> is true, the change is in-flight. When both <code>isDirty</code> and <code>isSaving</code> are <code>false</code>, the change has been saved.</li>
<li><code>isError</code> - The adapter reported that it was unable to save local changes to the backend. This may also result in the record having its <code>isValid</code> property become false if the adapter reported that server-side validations failed.</li>
<li><code>isNew</code> - The record was created locally and the adapter did not yet report that it was successfully saved.
<code>isValid</code> No client-side validations have failed and the adapter did not report any server-side validation failures.</li>
</ul>


<p>We can also bind to these with event handlers, which will be explained later, but for now let&#8217;s just list them:</p>

<ul>
<li><code>didLoad</code></li>
<li><code>didCreate</code></li>
<li><code>didUpdate</code></li>
<li><code>didDelete</code></li>
<li><code>becameError</code></li>
<li><code>becameInvalid</code></li>
</ul>


<p><em><a href="https://github.com/emberjs/data/blob/f274153754cb8b629cd98fc6c590f18bc8ee3ff6/packages/ember-data/lib/system/model/states.js#L223-L245">I would also encourage you to go take a look at the source documentation on GitHub</a></em></p>

<p>It is important for us to understand what each state means, because they
can affect how our application behaves. For example if we try to modify
a record which is already being saved, we will get an exception saying
something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Attempted</span> <span class="nx">to</span> <span class="nx">handle</span> <span class="nx">event</span> <span class="err">`</span><span class="nx">willSetProperty</span><span class="err">`</span> <span class="nx">on</span> <span class="o">&lt;</span><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="o">:</span><span class="nx">ember1144</span><span class="o">:</span><span class="kc">null</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">while</span> <span class="k">in</span> <span class="nx">state</span> <span class="nx">rootState</span><span class="p">.</span><span class="nx">loaded</span><span class="p">.</span><span class="nx">created</span><span class="p">.</span><span class="nx">inFlight</span><span class="p">.</span> <span class="nx">Called</span> <span class="kd">with</span>
</span><span class='line'><span class="p">{</span><span class="nx">reference</span><span class="o">:</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">],</span> <span class="nx">store</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">App</span><span class="p">.</span><span class="nx">Store</span><span class="o">:</span><span class="nx">ember313</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">username</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part here is the <code>rootState.loaded.created.inFlight</code>. If
we look at <a href="https://github.com/emberjs/data/blob/f274153754cb8b629cd98fc6c590f18bc8ee3ff6/packages/ember-data/lib/system/model/states.js#L254-L261">the source of <code>DirtyState</code></a>, we can see what this means</p>

<blockquote><p>Dirty states have three child states:</p>

<ul>
<li><code>uncommitted</code>: the store has not yet handed off the record to be saved.</li>
<li><code>inFlight</code>: the store has handed off the record to be saved, but the adapter has not yet acknowledged success.</li>
<li><code>invalid</code>: the record has invalid information and cannot be send to the adapter yet.</li>
</ul>
</blockquote>

<p>Let&#8217;s go through the record lifecycle and observe it&#8217;s state. We can do
this by doing <code>.get("stateManager.currentState.name")</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isLoaded&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; loaded</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isLoaded&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true, which means comitting the transaction will save the record</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; uncommitted</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;transaction&quot;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'><span class="c1">// while the record is being saved</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; inFlight</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isSaving&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="c1">// after the record was saved</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;stateManager.currentState.name&quot;</span><span class="p">)</span> <span class="c1">// =&gt; saved</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Transactions and <code>commit()</code></h2>

<p>In the previous example, we&#8217;ve used <code>get("transaction").commit()</code> to
persist the changes to the server. <code>.commit()</code> will take all <code>dirty</code>
records in the transaction and persiste them to the server.</p>

<p>A record becomes dirty whenever one of it&#8217;s attributes change. For
example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we create a new record, it will be dirty by default</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">()</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/emberjs/data/pull/646">Currently there&#8217;s a regression</a>
that we change an attribute to something else, and then back to the
original value, the record will be marked as dirty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">originalUsername</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; false</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nx">originalUsername</span><span class="p">)</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;isDirty&quot;</span><span class="p">)</span> <span class="c1">// =&gt; true, even though it should be false</span>
</span></code></pre></td></tr></table></div></figure>


<p>But let&#8217;s hope this will be fixed soon.</p>

<h2>Transactions</h2>

<p>Until now we assumed that there is some <em>global</em> transaction which is
the same for every single model. But this doesn&#8217;t have to be true. We
can create our own transactions and manage them at our will.</p>

<p>I recommend you take a look at <a href="https://github.com/emberjs/data/blob/master/packages/ember-data/tests/integration/transactions/basic_test.js">the tests for transactions in Ember Data
repository</a>.
They basically show all of the scenarios which you can encounter. For
example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'><span class="nx">record</span> <span class="o">=</span> <span class="nx">transaction</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// this will save the record to the server</span>
</span><span class='line'>
</span><span class='line'><span class="nx">record</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing is committed here, because the record</span>
</span><span class='line'>                      <span class="c1">// is removed from the transaction when it is saved</span>
</span><span class='line'>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// this will save the record properly</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also add a record to a transaction, which will remove it from the
global transaction. Important thing to note here is that
<a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/store.js#L127-L129"><code>store.transaction()</code></a>
<strong>always returns a new transaction</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing happens</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// user is saved</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same goes for deleting records</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">deleteRecord</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing happens</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// user is deleted</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also remove a record from a transaction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">user</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">transaction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;wycats&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span> <span class="c1">// nothing happens</span>
</span></code></pre></td></tr></table></div></figure>


<p>One scenario when transactions can be useful is when you just need to
change one record, without affecting changes to other records. You can
put that change in a separate transaction, instead of just doing
<code>store.commit()</code>.</p>

<p>Important thing to note here is that there&#8217;s a <code>defaultTransaction</code> for
the store to which you can get via <code>store.get("defaultTransaction")</code>.
This is where all of the records are placed, unless you explicitly
create a new transaction and assign a record to it.</p>

<p>These two are completely equivalent</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">commit</span><span class="p">();</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;defaultTransaction&quot;</span><span class="p">).</span><span class="nx">commit</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just take a look at how <code>store.commit()</code> is defined</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">commit</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;defaultTransaction&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>commit()</code></h2>

<p>Now that we understand how transactions work, let&#8217;s dig deep into
<code>store.commit()</code>. First thing we need to understand here is that Ember
Transactions use this thing called <code>bucket</code> to store records with
various states in. This is first initialized in the <a href="https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/transaction.js#L91-L101"><code>init</code> method of
<code>DS.Transaction</code></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;buckets&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clean</span><span class="o">:</span>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">created</span><span class="o">:</span>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">updated</span><span class="o">:</span>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">deleted</span><span class="o">:</span>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">inflight</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;relationships&#39;</span><span class="p">,</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">OrderedSet</span><span class="p">.</span><span class="nx">create</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each bucket represents one state in which a record can possibly be.
These are used in many different places in the transaction, and every
time a method changes it&#8217;s state, it will be moved to a corresponding
bucket</p>

<figure class='code'><figcaption><span>Example of recordBecameDirty</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">recordBecameDirty</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bucketType</span><span class="p">,</span> <span class="nx">record</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">removeFromBucket</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span> <span class="nx">record</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">addToBucket</span><span class="p">(</span><span class="nx">bucketType</span><span class="p">,</span> <span class="nx">record</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>More content will be coming soon</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller's Needs Explained]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/controllers-needs-explained/"/>
    <updated>2013-01-27T11:53:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/controllers-needs-explained</id>
    <content type="html"><![CDATA[<p>Since the v2 router came it became clear that using global singleton
controllers like <code>App.userController = App.UserController.create()</code> is
not the way to go. This prevents us from doing a simple binding like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">accountsBinding</span><span class="o">:</span> <span class="s2">&quot;App.accountsController.content&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no need or even possibility to manage the controller instances
with the new router though. It will create the instance for us. One way
we can use this is with <code>this.controllerFor</code>, which can be used inside
of a route.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// some magic with `this.controllerFor(&quot;user&quot;)`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>but since this method is only available on the route and not inside a
controller, it wasn&#8217;t very pleasant to specify dependencies (or needs)
between controllers. Which is exactly where needs come in and solve the
issue</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">needs</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>this will give you the opportunity to call <code>controllers.foo</code> on the
<code>App.UserController</code> instance and get back an instance of
<code>App.FooController</code>. You could even (ab)use that in the templates like
this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- inside `users` template --&gt;</span>
</span><span class='line'>{{controllers.foo}}
</span></code></pre></td></tr></table></div></figure>


<h2>Needs vs routing</h2>

<p>Needs become incredibly useful when you have nested routes, for example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/posts/:post_id&quot;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/edit&quot;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case we will get <code>post</code>, <code>post.index</code> and <code>post.edit</code>. If you go
to <code>/posts/1</code> you expect to get <code>post.index</code> template, which is true,
but the context (or model, or content) is being set on the
<code>PostController</code>, not on <code>PostIndexController</code>.</p>

<p>When you think about it it does make sense, because the <code>resource</code> is
basically shared between <code>post.index</code> and <code>post.edit</code>, that&#8217;s why it is
fetched and stored in their parent. Let&#8217;s go through this in detail:</p>

<ul>
<li>visit <code>/posts/1</code></li>
<li>router basically does <code>App.Post.find(1)</code> <strong>and assigns that to the
content of <code>PostController</code></strong></li>
<li>template <code>post</code> is rendered</li>
<li>template <code>post.index</code> is rendered in <code>post</code>&#8217;s outlet</li>
</ul>


<p>and when you transition to <code>/posts/1/edit</code>, the only thing that changes
is the leaf route, you still keep the same <code>App.Post</code> model, because it
belongs to the parent <code>PostRoute</code>, not to the leaf <code>PostIndexRoute</code>. But
this has a drawback. You&#8217;re not able to directly access the content from
the <code>post.index</code> template, since it doesn&#8217;t belong to it&#8217;s controller.
That&#8217;s where needs come in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PostIndexController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">needs</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;post&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in the <code>post/index</code> template, you can access the content like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{controllers.post.content}}
</span></code></pre></td></tr></table></div></figure>


<p>By specifying the need Ember will make sure that it gives you the right
<code>PostController</code> instance with it&#8217;s content set to the right value.</p>
]]></content>
  </entry>
  
</feed>

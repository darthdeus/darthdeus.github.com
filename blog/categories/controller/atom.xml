<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: controller | darthdeus vs Ember.js]]></title>
  <link href="http://darthdeus.github.com/blog/categories/controller/atom.xml" rel="self"/>
  <link href="http://darthdeus.github.com/"/>
  <updated>2013-08-19T01:27:21+02:00</updated>
  <id>http://darthdeus.github.com/</id>
  <author>
    <name><![CDATA[Jakub Arnold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Controller, ObjectController and ObjectProxy]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/controller-objectcontroller-and-objectproxy/"/>
    <updated>2013-01-27T19:24:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/controller-objectcontroller-and-objectproxy</id>
    <content type="html"><![CDATA[<p>When you first come to Ember, you'll soon stumble upon three things:</p>

<ul>
<li><code>Ember.Controller</code></li>
<li><code>Ember.ObjectController</code></li>
<li><code>Ember.ArrayController</code></li>
</ul>


<p>For some people (including me) it is not very clear what's the
difference between the first two.</p>

<p><code>Ember.Controller</code> is just a plain implementation of
<code>Ember.ControllerMixin</code>, while <code>Ember.ObjectController</code> is a subclass of
<code>Ember.ObjectProxy</code>. This is a huge difference! Let's take a look at how
<code>Ember.ObjectProxy</code> works, and as always starting with a code sample
(<a href="https://github.com/emberjs/ember.js/blob/master/packages/ember-runtime/lib/system/object_proxy.js#L35-L50">taken from the excellent source code documentation</a>).</p>

<p>```javascript
object = Ember.Object.create({
  name: "foo"
});</p>

<p>proxy = Ember.ObjectProxy.create({
  content: object
});</p>

<p>// Access and change existing properties
proxy.get("name") // => "foo"
proxy.set("name", "bar");
object.get("name") // => "bar"</p>

<p>// Create new "description" property on <code>object</code>
proxy.set("description", "baz");
object.get("description") // => "baz"
```</p>

<p>There is really no magic. In the basic usage, <code>Ember.ObjectProxy</code> will
delegate all of it's unknown properties to the <code>content</code> object, with
one exception.</p>

<p>If we try to set a new property on a proxy while it's content is
undefined, we will get an exception.</p>

<p><code>javascript
proxy = Ember.ObjectProxy.create();
proxy.set("foo", "bar"); // raises the following exception
</code></p>

<pre><code>Cannot delegate set('foo', bar) to the 'content' property
of object proxy &lt;Ember.ObjectProxy:ember420&gt;: its 'content' is undefined.
</code></pre>

<p>I've stumbled upon this in one scenario, where I didn't set content for
my <code>ObjectController</code>, but I tried to modify one of it's properties.
Raising the exception is a good example of failing fast, rather than
silently swallowing errors.</p>

<p>This being said you should almost always use <code>Ember.ObjectController</code>
over <code>Ember.Controller</code>, unless you know what you're doing :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller's Needs Explained]]></title>
    <link href="http://darthdeus.github.com/blog/2013/01/27/controllers-needs-explained/"/>
    <updated>2013-01-27T11:53:00+01:00</updated>
    <id>http://darthdeus.github.com/blog/2013/01/27/controllers-needs-explained</id>
    <content type="html"><![CDATA[<p>Since the v2 router came it became clear that using global singleton
controllers like <code>App.userController = App.UserController.create()</code> is
not the way to go. This prevents us from doing a simple binding like</p>

<p><code>javascript
App.UserController = Ember.ObjectController.extend({
  accountsBinding: "App.accountsController.content"
})
</code></p>

<p>There is no need or even possibility to manage the controller instances
with the new router though. It will create the instance for us. One way
we can use this is with <code>this.controllerFor</code>, which can be used inside
of a route.</p>

<p><code>javascript
App.UserRoute = Ember.Route.extend({
  setupController: function(controller, model) {
    // some magic with `this.controllerFor("user")`
  }
})
</code></p>

<p>but since this method is only available on the route and not inside a
controller, it wasn't very pleasant to specify dependencies (or needs)
between controllers. Which is exactly where needs come in and solve the
issue</p>

<p><code>javascript
App.UserController = Ember.ObjectController.extend({
  needs: ["foo"]
});
</code></p>

<p>this will give you the opportunity to call <code>controllers.foo</code> on the
<code>App.UserController</code> instance and get back an instance of
<code>App.FooController</code>. You could even (ab)use that in the templates like
this</p>

<p>```html</p>

<!-- inside `users` template -->


<p>{{controllers.foo}}
```</p>

<h2>Needs vs routing</h2>

<p>Needs become incredibly useful when you have nested routes, for example</p>

<p><code>javascript
App.Router.map(function() {
  this.resource("post", { path: "/posts/:post_id" }, function() {
    this.route("edit", { path: "/edit" });
  });
});
</code></p>

<p>In this case we will get <code>post</code>, <code>post.index</code> and <code>post.edit</code>. If you go
to <code>/posts/1</code> you expect to get <code>post.index</code> template, which is true,
but the context (or model, or content) is being set on the
<code>PostController</code>, not on <code>PostIndexController</code>.</p>

<p>When you think about it it does make sense, because the <code>resource</code> is
basically shared between <code>post.index</code> and <code>post.edit</code>, that's why it is
fetched and stored in their parent. Let's go through this in detail:</p>

<ul>
<li>visit <code>/posts/1</code></li>
<li>router basically does <code>App.Post.find(1)</code> <strong>and assigns that to the
content of <code>PostController</code></strong></li>
<li>template <code>post</code> is rendered</li>
<li>template <code>post.index</code> is rendered in <code>post</code>'s outlet</li>
</ul>


<p>and when you transition to <code>/posts/1/edit</code>, the only thing that changes
is the leaf route, you still keep the same <code>App.Post</code> model, because it
belongs to the parent <code>PostRoute</code>, not to the leaf <code>PostIndexRoute</code>. But
this has a drawback. You're not able to directly access the content from
the <code>post.index</code> template, since it doesn't belong to it's controller.
That's where needs come in.</p>

<p><code>javascript
App.PostIndexController = Ember.ObjectController.extend({
  needs: ["post"]
})
</code></p>

<p>and in the <code>post/index</code> template, you can access the content like this</p>

<p><code>html
{{controllers.post.content}}
</code></p>

<p>By specifying the need Ember will make sure that it gives you the right
<code>PostController</code> instance with it's content set to the right value.</p>
]]></content>
  </entry>
  
</feed>

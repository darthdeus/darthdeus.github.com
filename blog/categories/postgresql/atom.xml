<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: postgresql | darthdeus' blog]]></title>
  <link href="http://darthdeus.github.io/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://darthdeus.github.io/"/>
  <updated>2014-05-04T15:49:32+02:00</updated>
  <id>http://darthdeus.github.io/</id>
  <author>
    <name><![CDATA[Jakub Arnold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL Basics by Example]]></title>
    <link href="http://darthdeus.github.io/blog/2013/08/19/postgresql-basics-by-example/"/>
    <updated>2013-08-19T01:19:00+02:00</updated>
    <id>http://darthdeus.github.io/blog/2013/08/19/postgresql-basics-by-example</id>
    <content type="html"><![CDATA[<p>Connecting to a database</p>

<p><code>
$ psql postgres     # the default database
$ psql database_name
</code></p>

<p>Connecting as a specific user</p>

<p><code>
$ psql postgres john
$ psql -U john postgres
</code></p>

<p>Connecting to a host/port (by default <code>psql</code> uses a unix socket)</p>

<p><code>
$ psql -h localhost -p 5432 postgres
</code></p>

<p>You can also explicitly specify if you want to enter a password <code>-W</code> or not <code>-w</code></p>

<p><code>
$ psql -w postgres
$ psql -W postgres
Password:
</code></p>

<p>Once you're inside <code>psql</code> you can control the database. Here's a couple of handy commands</p>

<p><code>
postgres=# \h                 # help on SQL commands
postgres=# \?                 # help on psql commands, such as \? and \h
postgres=# \l                 # list databases
postgres=# \c database_name   # connect to a database
postgres=# \d                 # list of tables
postgres=# \d table_name      # schema of a given table
postgres=# \du                # list roles
postgres=# \e                 # edit in $EDITOR
</code></p>

<p>At this point you can just type SQL statements and they'll be executed on the database you're currently
connected to.</p>

<h2>User Management</h2>

<p>Once your application goes into production, or basically anywhere outside of your dev machine,
you're going to want to create some users and restrict access.</p>

<p>We have two options for creating users, either from the shell via <code>createuser</code> or via SQL <code>CREATE ROLE</code></p>

<p><code>
$ createuser john
postgres=# CREATE ROLE john;
</code></p>

<p>One thing to note here is that by default users created with <code>CREATE ROLE</code> can't log in. To allow login you need to provide
the <code>LOGIN</code> attribute</p>

<p><code>
postgres=# CREATE ROLE john LOGIN;
postgres=# CREATE ROLE john WITH LOGIN; # the same as above
postgres=# CREATE USER john;            # alternative to CREATE ROLE which adds the LOGIN attribute
</code></p>

<p>You can also add the <code>LOGIN</code> attribute with <code>ALTER ROLE</code></p>

<p><code>
postgres=# ALTER ROLE john LOGIN;
postgres=# ALTER ROLE john NOLOGIN;   # remove login
</code></p>

<p>You can also specify multiple attributes when using <code>CREATE ROLE</code> or <code>ALTER ROLE</code>, but bare in mind that <code>ALTER ROLE</code> doesn't change the permissions the role already has which you don't specify.</p>

<p>```
postgres=# CREATE ROLE deploy SUPERUSER LOGIN;
CREATE ROLE
postgres=# ALTER ROLE deploy NOSUPERUSER CREATEDB;  # the LOGIN privilege is not touched here
ALTER ROLE
postgres=# \du deploy</p>

<pre><code>       List of roles
</code></pre>

<p> Role name | Attributes | Member of
-----------+------------+-----------
 deploy    | Create DB  | {}
```</p>

<p>There's an alternative to <code>CREATE ROLE john WITH LOGIN</code>, and that's <code>CREATE USER</code> which automatically creates the <code>LOGIN</code> permission. It is important to understand that users and roles are the same thing. In fact there's no such thing as a user in PostgreSQL, only a role with LOGIN permission</p>

<p>```
postgres=# CREATE USER john;
CREATE ROLE
postgres=# CREATE ROLE kate;
CREATE ROLE
postgres=# \du</p>

<pre><code>                         List of roles
</code></pre>

<p> Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 darth     | Superuser, Create role, Create DB, Replication | {}
 john      |                                                | {}
 kate      | Cannot login                                   | {}
```</p>

<p>You can also create groups via <code>CREATE GROUP</code> (which is now aliased to <code>CREATE ROLE</code>), and then grant or revoke
access to other roles.</p>

<p>```
postgres=# CREATE GROUP admin LOGIN;
CREATE ROLE
postgres=# GRANT admin TO john;
GRANT ROLE
postgres=# \du</p>

<pre><code>                         List of roles
</code></pre>

<p> Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 admin     |                                                | {}
 darth     | Superuser, Create role, Create DB, Replication | {}
 john      |                                                | {admin}
 kate      | Cannot login                                   | {}
postgres=# REVOKE admin FROM john;
REVOKE ROLE
postgres=# \du</p>

<pre><code>                         List of roles
</code></pre>

<p> Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 admin     |                                                | {}
 darth     | Superuser, Create role, Create DB, Replication | {}
 john      |                                                | {}
 kate      | Cannot login                                   | {}
```</p>
]]></content>
  </entry>
  
</feed>
